---
prelude: >
    This is a minor release which introduces a couple of small, but important, breaking changes to to the API. These changes allow for a more consistent pattern in specifying the number of alpha and beta electrons throughout both the chemistry and non-chemistry functions in the API.

upgrade:
  - |
    
    The :func:`qiskit_addon_sqd.counts.generate_counts_bipartite_hamming`, :func:`qiskit_addon_sqd.subsampling.postselect_and_subsample`, and :func:`qiskit_addon_sqd.configuration_recovery.post_select_by_hamming_weight` now take the ``hamming_right`` positional argument before the ``hamming_left`` argument to better match the rest of the workflow.

    To upgrade

    .. code-block:: python
        
        from qiskit_addon_sqd.configuration_recovery import post_select_by_hamming_weight
        from qiskit_addon_sqd.subsampling import postselect_and_subsample
        from qiskit_addon_sqd.counts import generate_counts_bipartite_hamming

        counts = generate_counts_bipartite_hamming(num_samples, num_bits, num_elec_b, num_elec_a)

        ...

        bs_mat = post_select_by_hamming_weight(bs_mat_full, num_elec_b, num_elec_a)    

        ...
        
        batches = postselect_and_subsample(
            bs_mat,
            probs_arr,
            num_elec_b,
            num_elec_a,
            samples_per_batch,
            n_batches,
        )

    should be changed to

    .. code-block:: python
        
        from qiskit_addon_sqd.configuration_recovery import post_select_by_hamming_weight
        from qiskit_addon_sqd.subsampling import postselect_and_subsample
        from qiskit_addon_sqd.counts import generate_counts_bipartite_hamming

        counts = generate_counts_bipartite_hamming(num_samples, num_bits, num_elec_a, num_elec_b)

        bs_mat = post_select_by_hamming_weight(bs_mat_full, num_elec_a, num_elec_b)
    
        ...
        
        batches = postselect_and_subsample(
            bs_mat,
            probs_arr,
            num_elec_a,
            num_elec_b,
            samples_per_batch,
            n_batches,
        )
